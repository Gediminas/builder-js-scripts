#!/usr/bin/env bash

DIRNAME="${BASH_SOURCE%[/\\]*}"
readarray -t errors   < "$DIRNAME/cfg/match_errors.txt"
readarray -t warnings < "$DIRNAME/cfg/match_warnings.txt"

##################################################
# FUNCTIONS

Decorate () {
  forlog=$2

  # HEADER
  if [[ $1 =~ (^#{1,}\ ) ]]; then
     [ "$forlog" ] && echo -ne "\n\e[93m" || echo -ne "# "
     echo -n "$1"
     [ "$forlog" ] && echo -e  "\e[m"
     return 0
  fi

  # COMMAND
  if [[ $1 =~ (^>>\ ) ]]; then
     [ "$forlog" ] && echo -ne "\e[96m" || echo -ne "> "
     echo -n "$1"
     [ "$forlog" ] && echo -e  "\e[m"
     return 0
  fi

  # DEBUG
  if [[ $1 =~ ^~ ]]; then
     [ "$forlog" ] && echo -ne "\e[35m" || echo -ne "~ "
     echo -n "$1"
     [ "$forlog" ] && echo -e  "\e[m"
     return 0
  fi

  # OK
  if [[ $1 =~ (^\[OK\]\ ) ]]; then
     [ "$forlog" ] && echo -ne "\e[42m" || echo -ne "+ "
     echo -n "$1"
     [ "$forlog" ] && echo -e  "\e[m"
     return 0
  fi

  # WARNING
  for match in "${warnings[@]}"; do
    if [[ $1 =~ $match ]]; then
      [ "$forlog" ] && echo -ne "\e[7;49;93m[W] " || echo -ne "W "
      echo -n "$1"
      [ "$forlog" ] && echo -e  "\e[m"
      return 0
    fi
  done

  # ERROR
  for match in "${errors[@]}"; do
    if [[ $1 =~ $match ]]; then
      [ "$forlog" ] && echo -ne "\e[7;49;91m[E] " || echo -ne "E "
      echo -n "$1"
      [ "$forlog" ] && echo -e  "\e[m"
      return 1
    fi
  done

  # OTHER
  [ "$forlog" ] && echo -ne "\e[32m" || echo -ne "  "
  echo -n "$1"
  [ "$forlog" ] && echo -e  "\e[m"
  return 0
}

TeeTimeDecor () {
  buffer=
  while IFS= read -r -n1 ch; do
    case $ch in
      '' | $'\r')
        std=$(Decorate "$buffer" 1)
        log=$(Decorate "$buffer")
        halt="$?"
        echo -n "$(date '+%Y-%m-%d %H:%M:%S') " >> "$1"
        echo    "$log" >> "$1"
        [ -z "$ch" ] && echo "$std" || echo -n "$std$ch"
        buffer=
        if [ "$halt" == "1" ]; then
          echo "$(date '+%Y-%m-%d %H:%M:%S') [HALT]" >> "$1"
          echo "[HALT]"
          kill -s TERM 0
        fi
        ;;
      *)
        buffer=$buffer$ch
        ;;
    esac
  done
}

##################################################
# MAIN

if [ -z "$1" ]; then
    echo "Usage: build some-product"
    exit 1
fi

PRODUCT=$1
DEBUG=$2
SOURCE=$(realpath --no-symlinks "${BASH_SOURCE[0]}")
RECIPES=$(dirname "$SOURCE")
RECIPE=$(realpath --no-symlinks "$ROOT/recipies/$PRODUCT.rcpt")

if [ "$DEBUG" == "debug" ]; then
  WORK="$ROOT/_working/$PRODUCT/_DEBUG"
else
  now=$(date)
  sub1=$(date --date="$now" '+%Y-%m-%d')
  sub2=$(date --date="$now" '+%Y-%m-%d_%H-%M-%S')
  WORK="$RECIPES"/_working/"$PRODUCT"/$sub1/$sub2
fi

echo "----------------------------------------"
echo "BUILD: PRODUCT: $PRODUCT"
echo "BUILD: RECIPES: $RECIPES"
echo "BUILD: RECIPE:  $RECIPE"
echo "BUILD: WORK:    $WORK"

mkdir -p "$WORK" && pushd "$_" 1>/dev/null || exit
  echo "----------------------------------------"
  "$RECIPE" |& TeeTimeDecor 0000.log
  echo "----------------------------------------"
popd 1>/dev/null 2>&1
